<header class="bg-gradient-to-r from-primary to-secondary text-white sticky top-0 z-50 shadow-lg transition-all duration-300 relative overflow-visible">
  <!-- 粒子容器 -->
  <div class="header-particles absolute inset-0 z-0"></div>
  
  <div class="container mx-auto px-4 py-3 max-w-6xl relative z-10">
    <!-- 移动端/桌面端通用导航栏 - 强制横向排列 -->
    <div class="flex items-center justify-between w-full flex-wrap"> <!-- 添加flex-wrap支持换行 -->
      <!-- Logo区域（强制显示） -->
      <div class="flex items-center gap-3 flex-shrink-0">
        <div class="w-10 h-10 rounded-lg overflow-hidden shadow-lg transform hover:scale-105 transition-transform duration-300" 
             style="box-shadow: 0 4px 12px rgba(22, 93, 255, 0.3);">
          <canvas id="logo-canvas" width="128" height="128" 
                  style="width: 40px; height: 40px; display: block;"></canvas>
        </div>
        <a href="{{ config.baseUrl }}/" class="text-xl font-bold tracking-tight whitespace-nowrap">
          {{ config.siteName }}
        </a>
      </div>
      
      <!-- 搜索框（移动端居中，固定宽度90%） -->
      <div class="search-container w-full md:flex-1 mx-auto md:mx-2 min-w-[120px] relative max-w-[90%]">
        <div class="relative group">
          <input type="text" id="search-input" placeholder="搜索..." 
                 class="w-full bg-white/15 backdrop-blur-sm border border-white/30 rounded-full py-2 pl-8 sm:pl-10 pr-4 text-white text-sm
                        placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 
                        transition-all duration-300 group-hover:bg-white/20">
          <i class="fa fa-search absolute left-3 sm:left-4 top-1/2 transform -translate-y-1/2 text-white/80 group-hover:text-white transition-colors"></i>
          <span class="absolute right-4 top-1/2 transform -translate-y-1/2 w-2 h-2 bg-white/60 rounded-full opacity-0 group-hover:opacity-100 animate-ping"></span>
        </div>
        
        <!-- 搜索结果容器 -->
        <div id="search-results" class="search-results mt-1 bg-white/95 dark:bg-gray-800/95 rounded-xl shadow-2xl p-2 absolute 
                                      z-500 hidden max-h-96 overflow-y-auto 
                                      border border-gray-200 dark:border-gray-700
                                      left-1/2 transform -translate-x-1/2  <!-- 初始水平居中 -->
                                      w-[90vw]  <!-- 初始宽度为视口90% -->
                                      max-w-6xl  <!-- 最大宽度限制 -->
                                      mx-auto">
        </div>
      </div>
      
      <!-- 右侧功能区（仅保留菜单按钮） -->
      <div class="flex items-center gap-2 flex-shrink-0">
        <!-- 菜单按钮（移动端显示） -->
        <button id="menu-toggle" class="md:hidden text-white p-2 rounded-full hover:bg-white/10 transition-colors active:bg-white/20 active:scale-95">
          <i class="fa fa-bars text-xl"></i>
        </button>
        
        <!-- 桌面端导航菜单 -->
        <nav id="main-nav" class="hidden md:flex space-x-1">
          <a href="{{ config.baseUrl }}/" class="px-4 py-2 rounded-full text-sm font-medium 
                {% if isHome %}bg-white/20 backdrop-blur-sm shadow-md{% endif %} 
                hover:bg-white/10 transition-all duration-300 flex items-center gap-1">
            <i class="fa fa-home"></i>
            <span class="hidden sm:inline">首页</span>
          </a>
          <a href="{{ config.baseUrl }}/page/1/" class="px-4 py-2 rounded-full text-sm font-medium 
                {% if isPage %}bg-white/20 backdrop-blur-sm shadow-md{% endif %} 
                hover:bg-white/10 transition-all duration-300 flex items-center gap-1">
            <i class="fa fa-book"></i>
            <span class="hidden sm:inline">文章</span>
          </a>
          <a href="{{ config.baseUrl }}/tags/" class="px-4 py-2 rounded-full text-sm font-medium 
                {% if isTag %}bg-white/20 backdrop-blur-sm shadow-md{% endif %} 
                hover:bg-white/10 transition-all duration-300 flex items-center gap-1">
            <i class="fa fa-tags"></i>
            <span class="hidden sm:inline">标签</span>
          </a>
        </nav>
      </div>
    </div>
  </div>
  
  <!-- 移动端菜单（全屏覆盖式） -->
  <div id="mobileMenu" class="md:hidden bg-gradient-to-b from-primary/95 to-secondary/95 backdrop-blur-lg fixed inset-0 z-40 transform translate-x-full transition-transform duration-300 ease-in-out">
    <div class="container mx-auto px-4 py-20 h-full flex flex-col">
      <div class="flex justify-end mb-10">
        <button id="menu-close" class="text-white p-2 rounded-full hover:bg-white/10 transition-colors active:bg-white/20 active:scale-95">
          <i class="fa fa-times text-2xl"></i>
        </button>
      </div>
      <div class="flex flex-col space-y-6 items-center text-center">
        <a href="{{ config.baseUrl }}/" class="px-8 py-4 rounded-full text-xl font-medium text-white/90 
              {% if isHome %}bg-white/20 backdrop-blur-sm shadow-md{% endif %} 
              hover:bg-white/10 transition-all duration-300 w-full max-w-xs">
          <i class="fa fa-home mr-2"></i>首页
        </a>
        <a href="{{ config.baseUrl }}/page/1/" class="px-8 py-4 rounded-full text-xl font-medium text-white/90 
              {% if isPage %}bg-white/20 backdrop-blur-sm shadow-md{% endif %} 
              hover:bg-white/10 transition-all duration-300 w-full max-w-xs">
          <i class="fa fa-book mr-2"></i>文章
        </a>
        <a href="{{ config.baseUrl }}/tags/" class="px-8 py-4 rounded-full text-xl font-medium text-white/90 
              {% if isTag %}bg-white/20 backdrop-blur-sm shadow-md{% endif %} 
              hover:bg-white/10 transition-all duration-300 w-full max-w-xs">
          <i class="fa fa-tags mr-2"></i>标签
        </a>
      </div>
    </div>
  </div>
  
  <!-- 菜单遮罩层 -->
  <div id="menu-overlay" class="md:hidden fixed inset-0 bg-black/50 z-30 opacity-0 pointer-events-none transition-opacity duration-300"></div>
</header>

<!-- 高清图标绘制脚本（保持不变） -->
<script>
document.addEventListener("DOMContentLoaded", function() {
  const canvas = document.getElementById('logo-canvas');
  const ctx = canvas.getContext('2d');
  
  // 书签图标配置
  const config = {
    icon: "\uf15c", // 书签图标Unicode
    iconSize: 72,
    backgroundColor: ["#165DFF", "#7B61FF"],
    borderRadius: 24,
    iconColor: "white",
    scale: 4
  };
  
  // 绘制高清图标
  function drawHighResIcon() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // 渐变背景
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, config.backgroundColor[0]);
    gradient.addColorStop(1, config.backgroundColor[1]);
    
    // 圆角矩形背景（抗锯齿处理）
    ctx.beginPath();
    const radius = config.borderRadius;
    ctx.moveTo(radius, 0);
    ctx.lineTo(canvas.width - radius, 0);
    ctx.arcTo(canvas.width, 0, canvas.width, radius, radius);
    ctx.lineTo(canvas.width, canvas.height - radius);
    ctx.arcTo(canvas.width, canvas.height, canvas.width - radius, canvas.height, radius);
    ctx.lineTo(radius, canvas.height);
    ctx.arcTo(0, canvas.height, 0, canvas.height - radius, radius);
    ctx.lineTo(0, radius);
    ctx.arcTo(0, 0, radius, 0, radius);
    ctx.closePath();
    
    // 阴影增强立体感
    ctx.shadowColor = 'rgba(0, 0, 0, 0.1)';
    ctx.shadowBlur = 8;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 2;
    
    ctx.fillStyle = gradient;
    ctx.fill();
    
    // 绘制图标
    ctx.fillStyle = config.iconColor;
    ctx.font = `normal normal normal ${config.iconSize}px FontAwesome`;
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(config.icon, canvas.width / 2, canvas.height / 2);
    
    // 高光效果
    const highlight = ctx.createLinearGradient(
      canvas.width * 0.2, 
      canvas.height * 0.2, 
      canvas.width * 0.8, 
      canvas.height * 0.8
    );
    highlight.addColorStop(0, 'rgba(255, 255, 255, 0.2)');
    highlight.addColorStop(1, 'rgba(255, 255, 255, 0)');
    
    ctx.beginPath();
    ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width * 0.35, 0, Math.PI * 2);
    ctx.fillStyle = highlight;
    ctx.fill();
  }
  
  // 检查Font Awesome加载状态
  function isFontAwesomeLoaded() {
    const testSpan = document.createElement('span');
    testSpan.innerHTML = '&#xf000;';
    testSpan.style.fontFamily = 'FontAwesome';
    testSpan.style.position = 'absolute';
    testSpan.style.visibility = 'hidden';
    document.body.appendChild(testSpan);
    const isLoaded = testSpan.offsetWidth > 0;
    document.body.removeChild(testSpan);
    return isLoaded;
  }
  
  // 初始化图标
  function initIcon() {
    if (isFontAwesomeLoaded()) {
      drawHighResIcon();
    } else {
      setTimeout(initIcon, 100);
    }
  }
  
  initIcon();
  window.addEventListener('resize', drawHighResIcon);
});
</script>

<!-- 核心交互脚本（添加窗口大小变化时更新搜索结果位置的逻辑） -->
<script>
document.addEventListener("DOMContentLoaded", function() {
  // 元素获取
  const menuToggle = document.getElementById("menu-toggle");
  const menuClose = document.getElementById("menu-close");
  const mobileMenu = document.getElementById("mobileMenu");
  const menuOverlay = document.getElementById("menu-overlay");
  const searchInput = document.getElementById("search-input");
  const searchResults = document.getElementById("search-results");
  
  // 移动端菜单展开
  function openMenu() {
    mobileMenu.classList.remove("translate-x-full");
    mobileMenu.classList.add("translate-x-0");
    menuOverlay.classList.remove("opacity-0", "pointer-events-none");
    document.body.style.overflow = "hidden"; // 禁止背景滚动
  }
  
  // 移动端菜单收起
  function closeMenu() {
    mobileMenu.classList.add("translate-x-full");
    mobileMenu.classList.remove("translate-x-0");
    menuOverlay.classList.add("opacity-0", "pointer-events-none");
    document.body.style.overflow = ""; // 恢复滚动
  }
  
  // 绑定菜单事件
  if (menuToggle) menuToggle.addEventListener("click", openMenu);
  if (menuClose) menuClose.addEventListener("click", closeMenu);
  if (menuOverlay) menuOverlay.addEventListener("click", closeMenu);
  
  // 更新搜索结果位置的函数
  function updateSearchPosition() {
    if (!searchInput || !searchResults) return;
    
    // 获取搜索框的实时位置和尺寸
    const inputRect = searchInput.getBoundingClientRect();
    // 获取搜索容器的位置（用于相对定位参考）
    const containerRect = searchInput.closest('.search-container').getBoundingClientRect();
    
    // 计算搜索结果的宽度（小屏幕90%视口，大屏幕与搜索框一致）
    const isMobile = window.innerWidth < 640;
    const resultWidth = isMobile ? '90vw' : `${inputRect.width}px`;
    
    // 设置搜索结果的位置和尺寸
    searchResults.style.width = resultWidth;
    searchResults.style.left = isMobile ? '50%' : `${inputRect.left - containerRect.left}px`;
    searchResults.style.transform = isMobile ? 'translateX(-50%)' : 'none';
    searchResults.style.top = `${inputRect.height + 4}px`; // 距离搜索框底部4px
  }
  
  // 初始加载时更新位置
  updateSearchPosition();
  
  // 窗口大小变化时更新位置
  window.addEventListener('resize', function() {
    updateSearchPosition();
    // 大屏幕自动关闭菜单
    if (window.innerWidth >= 768) {
      closeMenu();
    }
  });
  
  // 搜索框聚焦/输入时更新位置（确保动态变化时位置正确）
  if (searchInput) {
    searchInput.addEventListener('focus', updateSearchPosition);
    searchInput.addEventListener('input', updateSearchPosition);
  }
  
  // 搜索脚本加载后可能需要再次更新
  const observer = new MutationObserver(updateSearchPosition);
  observer.observe(document.getElementById('search-results'), { childList: true });
});
</script>

<!-- 引入搜索脚本 -->
<script src="{{ config.baseUrl }}/scripts/search.js"></script>
<script src="{{ config.baseUrl }}/styles/main.js"></script>